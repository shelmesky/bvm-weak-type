// Code generated by goyacc -o parser.go -v y.output parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

func setResult(l yyLexer, v *Node) {
	l.(*lexer).result = v
}

//line parser.y:10
type yySymType struct {
	yys int
	n   *Node
	b   bool
	i   int64
	f   float64
	s   string
	sa  []string
	va  []NVar
}

const IDENT = 57346
const ENV = 57347
const CALL = 57348
const CALLCONTRACT = 57349
const INDEX = 57350
const INT = 57351
const FLOAT = 57352
const STRING = 57353
const QSTRING = 57354
const TRUE = 57355
const FALSE = 57356
const NEWLINE = 57357
const COMMA = 57358
const COLON = 57359
const LPAREN = 57360
const RPAREN = 57361
const OBJ = 57362
const LBRACE = 57363
const RBRACE = 57364
const LBRACKET = 57365
const RBRACKET = 57366
const QUESTION = 57367
const DOUBLEDOT = 57368
const DOT = 57369
const ADD = 57370
const SUB = 57371
const MUL = 57372
const DIV = 57373
const MOD = 57374
const BIT_NOT = 57375
const BIT_AND = 57376
const BIT_OR = 57377
const BIT_XOR = 57378
const LEFT_SHIFT = 57379
const RIGHT_SHIFT = 57380
const POW = 57381
const ADD_ASSIGN = 57382
const SUB_ASSIGN = 57383
const MUL_ASSIGN = 57384
const DIV_ASSIGN = 57385
const MOD_ASSIGN = 57386
const LEFT_SHIFT_ASSIGN = 57387
const RIGHT_SHIFT_ASSIGN = 57388
const BIT_AND_ASSIGN = 57389
const BIT_XOR_ASSIGN = 57390
const BIT_OR_ASSIGN = 57391
const ASSIGN = 57392
const AND = 57393
const OR = 57394
const EQ = 57395
const NOT_EQ = 57396
const NOT = 57397
const LT = 57398
const GT = 57399
const LTE = 57400
const GTE = 57401
const BREAK = 57402
const CONTINUE = 57403
const DATA = 57404
const CONTRACT = 57405
const IF = 57406
const ELIF = 57407
const ELSE = 57408
const RETURN = 57409
const WHILE = 57410
const FUNC = 57411
const FOR = 57412
const IN = 57413
const SWITCH = 57414
const CASE = 57415
const READ = 57416
const DEFAULT = 57417
const VAR = 57418
const UNARYMINUS = 57419
const UNARYNOT = 57420

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"ENV",
	"CALL",
	"CALLCONTRACT",
	"INDEX",
	"INT",
	"FLOAT",
	"STRING",
	"QSTRING",
	"TRUE",
	"FALSE",
	"NEWLINE",
	"COMMA",
	"COLON",
	"LPAREN",
	"RPAREN",
	"OBJ",
	"LBRACE",
	"RBRACE",
	"LBRACKET",
	"RBRACKET",
	"QUESTION",
	"DOUBLEDOT",
	"DOT",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"BIT_NOT",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"LEFT_SHIFT",
	"RIGHT_SHIFT",
	"POW",
	"ADD_ASSIGN",
	"SUB_ASSIGN",
	"MUL_ASSIGN",
	"DIV_ASSIGN",
	"MOD_ASSIGN",
	"LEFT_SHIFT_ASSIGN",
	"RIGHT_SHIFT_ASSIGN",
	"BIT_AND_ASSIGN",
	"BIT_XOR_ASSIGN",
	"BIT_OR_ASSIGN",
	"ASSIGN",
	"AND",
	"OR",
	"EQ",
	"NOT_EQ",
	"NOT",
	"LT",
	"GT",
	"LTE",
	"GTE",
	"BREAK",
	"CONTINUE",
	"DATA",
	"CONTRACT",
	"IF",
	"ELIF",
	"ELSE",
	"RETURN",
	"WHILE",
	"FUNC",
	"FOR",
	"IN",
	"SWITCH",
	"CASE",
	"READ",
	"DEFAULT",
	"VAR",
	"UNARYMINUS",
	"UNARYNOT",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1005

var yyAct = [...]int{

	72, 103, 45, 127, 78, 183, 79, 185, 6, 196,
	212, 214, 181, 136, 2, 13, 20, 11, 63, 35,
	182, 128, 122, 67, 99, 166, 68, 69, 164, 63,
	12, 167, 223, 76, 164, 73, 165, 100, 200, 208,
	191, 14, 7, 66, 174, 64, 187, 173, 201, 104,
	193, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 79, 168, 135, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 52,
	102, 71, 142, 143, 144, 145, 146, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 139, 134, 231, 197, 47, 46, 43, 44, 32,
	37, 38, 39, 40, 41, 42, 210, 106, 132, 36,
	138, 163, 49, 170, 48, 101, 130, 34, 33, 162,
	50, 175, 8, 70, 132, 177, 178, 133, 129, 3,
	171, 172, 130, 180, 123, 131, 179, 176, 140, 74,
	75, 83, 84, 81, 82, 85, 51, 94, 95, 96,
	97, 98, 99, 65, 4, 186, 5, 105, 1, 188,
	9, 17, 184, 141, 20, 20, 88, 89, 192, 92,
	93, 90, 91, 198, 104, 199, 16, 213, 202, 19,
	10, 126, 77, 0, 204, 0, 206, 207, 0, 0,
	0, 0, 211, 0, 0, 0, 20, 203, 20, 0,
	205, 221, 20, 222, 0, 0, 209, 0, 0, 0,
	0, 0, 20, 0, 219, 0, 0, 20, 20, 0,
	0, 20, 0, 224, 225, 20, 0, 0, 31, 228,
	28, 29, 32, 232, 0, 0, 0, 0, 0, 15,
	0, 31, 0, 28, 29, 32, 234, 0, 0, 0,
	0, 0, 15, 0, 31, 0, 28, 29, 32, 233,
	0, 0, 0, 0, 0, 15, 0, 0, 0, 0,
	0, 31, 230, 28, 29, 32, 0, 0, 0, 0,
	0, 0, 15, 0, 23, 24, 0, 0, 22, 229,
	0, 25, 26, 27, 30, 0, 18, 23, 24, 0,
	21, 22, 0, 0, 25, 26, 27, 30, 0, 18,
	23, 24, 0, 21, 22, 0, 0, 25, 26, 27,
	30, 0, 18, 0, 0, 0, 21, 23, 24, 0,
	0, 22, 0, 0, 25, 26, 27, 30, 31, 18,
	28, 29, 32, 21, 0, 0, 0, 0, 0, 15,
	0, 31, 0, 28, 29, 32, 226, 0, 0, 0,
	0, 0, 15, 0, 31, 0, 28, 29, 32, 220,
	0, 0, 0, 0, 0, 15, 0, 0, 0, 0,
	0, 31, 216, 28, 29, 32, 0, 0, 0, 0,
	0, 0, 15, 0, 23, 24, 0, 0, 22, 215,
	0, 25, 26, 27, 30, 0, 18, 23, 24, 0,
	21, 22, 0, 0, 25, 26, 27, 30, 0, 18,
	23, 24, 0, 21, 22, 0, 0, 25, 26, 27,
	30, 31, 18, 28, 29, 32, 21, 23, 24, 0,
	0, 22, 15, 0, 25, 26, 27, 30, 31, 18,
	28, 29, 32, 21, 0, 0, 0, 0, 0, 15,
	0, 31, 0, 28, 29, 32, 190, 83, 84, 81,
	82, 85, 15, 94, 95, 96, 97, 98, 99, 189,
	0, 0, 0, 0, 0, 0, 0, 23, 24, 0,
	0, 22, 0, 0, 25, 26, 27, 30, 0, 18,
	0, 0, 0, 21, 23, 24, 0, 0, 22, 0,
	0, 25, 26, 27, 30, 0, 18, 23, 24, 0,
	21, 22, 0, 0, 25, 26, 27, 30, 0, 18,
	194, 0, 0, 21, 0, 195, 0, 83, 84, 81,
	82, 85, 0, 94, 95, 96, 97, 98, 99, 81,
	82, 85, 0, 94, 95, 96, 97, 98, 99, 0,
	86, 87, 88, 89, 227, 92, 93, 90, 91, 0,
	0, 83, 84, 81, 82, 85, 0, 94, 95, 96,
	97, 98, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 88, 89, 218, 92,
	93, 90, 91, 0, 0, 83, 84, 81, 82, 85,
	0, 94, 95, 96, 97, 98, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	88, 89, 217, 92, 93, 90, 91, 0, 0, 83,
	84, 81, 82, 85, 0, 94, 95, 96, 97, 98,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 88, 89, 0, 92, 93, 90,
	91, 169, 0, 0, 0, 83, 84, 81, 82, 85,
	0, 94, 95, 96, 97, 98, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	88, 89, 161, 92, 93, 90, 91, 0, 0, 0,
	0, 83, 84, 81, 82, 85, 0, 94, 95, 96,
	97, 98, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 88, 89, 0, 92,
	93, 90, 91, 137, 0, 0, 0, 83, 84, 81,
	82, 85, 0, 94, 95, 96, 97, 98, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 88, 89, 125, 92, 93, 90, 91, 0,
	0, 83, 84, 81, 82, 85, 0, 94, 95, 96,
	97, 98, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 88, 89, 124, 92,
	93, 90, 91, 0, 0, 83, 84, 81, 82, 85,
	0, 94, 95, 96, 97, 98, 99, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 86, 87,
	88, 89, 0, 92, 93, 90, 91, 83, 84, 81,
	82, 85, 0, 94, 95, 96, 97, 98, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 88, 89, 0, 92, 93, 90, 91, 83,
	84, 81, 82, 85, 0, 94, 95, 96, 97, 98,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 88, 89, 0, 92, 93, 90,
	91, 83, 84, 81, 82, 85, 0, 94, 95, 96,
	97, 98, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 89, 0, 92,
	93, 90, 91, 47, 46, 43, 44, 32, 37, 38,
	39, 40, 41, 42, 0, 0, 0, 36, 0, 0,
	49, 0, 48, 0, 0, 0, 0, 0, 50, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51,
}
var yyPact = [...]int{

	-49, 124, 160, -1000, -66, 21, -1000, 117, -45, 8,
	-1000, 20, -1000, 437, 113, -1000, -1000, 112, 949, 29,
	-5, 159, 949, -1000, -1000, 949, 949, 127, 949, 145,
	146, -1000, 949, -70, -1000, 829, 949, -1000, -1000, -1000,
	-1000, -1000, -1000, 949, 145, 6, -1000, -1000, 949, 106,
	949, 949, 949, 949, 949, 949, 949, 949, 949, 949,
	949, 949, 949, 949, 949, -28, 140, 797, 861, 763,
	134, 126, 861, 118, 85, -3, 729, 105, -1000, 144,
	-1000, 949, 949, 949, 949, 949, 949, 949, 949, 949,
	949, 949, 949, 949, 949, 949, 949, 949, 949, 949,
	693, 110, 102, 12, 861, 9, 50, -1000, -1000, 861,
	861, 861, 861, 861, 861, 861, 861, 861, 861, 861,
	657, 861, 949, -1000, -1000, -1000, 28, -1000, 140, -1000,
	949, -1000, 143, -1000, 949, 949, 142, -1000, -10, 140,
	-30, -68, -15, -15, 529, 529, -15, 893, 123, 449,
	449, 449, 449, 449, 449, -15, -15, -15, -15, -15,
	-15, -1000, -1000, -1000, 949, -1000, 35, -1000, 949, -1000,
	861, 467, 454, 19, 134, 861, 33, 861, 519, -62,
	-1000, 89, 949, 949, -1000, 17, 861, 31, 861, -1000,
	-1000, -1000, -1000, 949, -1000, 949, 949, -1000, 861, 18,
	-1000, 101, -55, 387, 861, 370, 621, 587, -1000, 357,
	949, 861, 949, -1000, 11, -1000, -1000, -1000, -1000, 344,
	-1000, 861, 553, -1000, 277, 260, 88, -1000, 247, -1000,
	-1000, -1000, 234, -1000, -1000,
}
var yyPgo = [...]int{

	0, 21, 4, 192, 3, 191, 190, 81, 189, 0,
	188, 187, 186, 173, 172, 171, 15, 35, 170, 168,
	2, 1, 167, 166,
}
var yyR1 = [...]int{

	0, 16, 16, 16, 16, 7, 7, 7, 17, 17,
	17, 8, 20, 20, 11, 11, 10, 10, 13, 13,
	14, 14, 12, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 21,
	21, 22, 22, 22, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 1,
	1, 4, 5, 5, 5, 2, 2, 3, 3, 6,
	6, 18, 23, 23, 19, 19,
}
var yyR2 = [...]int{

	0, 0, 2, 2, 3, 0, 1, 3, 0, 3,
	5, 1, 3, 4, 0, 4, 0, 6, 0, 7,
	0, 4, 5, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 2, 7, 1, 1,
	1, 2, 5, 7, 3, 3, 7, 9, 9, 1,
	3, 3, 6, 5, 3, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 1,
	2, 1, 0, 1, 3, 2, 4, 1, 3, 0,
	7, 2, 0, 1, 7, 2,
}
var yyChk = [...]int{

	-1000, -19, 63, 15, 4, -23, 74, 21, 15, -18,
	-6, 62, 22, -16, 21, 15, -12, -15, 72, -8,
	-20, 76, 64, 60, 61, 67, 68, 69, 6, 7,
	70, 4, 8, 15, 15, -9, 18, 9, 10, 11,
	12, 13, 14, 6, 7, -20, 5, 4, 23, 21,
	29, 55, 50, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 23, 50, 4, -1, -9, -9, -9,
	6, -7, -9, -17, 4, 4, -9, -3, -2, 76,
	15, 30, 31, 28, 29, 32, 51, 52, 53, 54,
	58, 59, 56, 57, 34, 35, 36, 37, 38, 39,
	-9, -7, -17, -21, -9, -22, 11, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, -9, 50, 4, 21, 21, -5, -4, -1, 4,
	16, 19, 16, 19, 17, 71, 16, 24, 15, -1,
	4, -13, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, 19, 19, 19, 16, 24, 16, 22, 17, 24,
	-9, -16, -16, 19, 16, -9, 4, -9, -9, 4,
	-2, 22, 50, 73, -14, 75, -9, 11, -9, 22,
	22, 21, -4, 17, 21, 26, 71, 15, -9, -21,
	21, 17, -10, -16, -9, -16, -9, -9, 21, -16,
	15, -9, 65, -11, 66, 22, 22, 21, 21, -16,
	22, -9, -9, 21, -16, -16, 22, 21, -16, 22,
	22, 15, -16, 22, 22,
}
var yyDef = [...]int{

	0, -2, 0, 105, 102, 0, 103, 0, 99, 0,
	1, 0, 104, 101, 0, 2, 3, 0, 0, 0,
	0, 0, 0, 38, 39, 40, 0, 0, 5, 8,
	0, 11, 0, 0, 4, 0, 0, 55, 56, 57,
	58, 59, 60, 5, 8, 63, 64, 65, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 36, 0, 41, 0,
	92, 0, 6, 0, 0, 0, 0, 0, 97, 0,
	18, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 49, 0, 0, 87, 88, 23,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	0, 34, 0, 90, 1, 1, 0, 93, 91, 89,
	0, 44, 0, 45, 0, 0, 0, 12, 0, 95,
	89, 20, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 54, 61, 62, 0, 66, 0, 67, 0, 13,
	35, 0, 0, 0, 0, 7, 0, 9, 0, 0,
	98, 0, 0, 0, 22, 0, 50, 0, 51, 16,
	42, 1, 94, 0, 1, 0, 0, 100, 96, 0,
	1, 0, 14, 0, 10, 0, 0, 0, 1, 0,
	0, 53, 0, 37, 0, 43, 46, 1, 1, 0,
	21, 52, 0, 1, 0, 0, 0, 1, 0, 48,
	47, 19, 0, 15, 17,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:144
		{
			yyVAL.n = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:145
		{
			yyVAL.n = yyDollar[1].n
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:146
		{
			yyVAL.n = addStatement(yyDollar[1].n, yyDollar[2].n, yylex)
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:147
		{
			yyVAL.n = addStatement(yyDollar[1].n, yyDollar[2].n, yylex)
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:151
		{
			yyVAL.n = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:152
		{
			yyVAL.n = newParam(yyDollar[1].n, yylex)
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:153
		{
			yyVAL.n = addParam(yyDollar[1].n, yyDollar[3].n)
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:157
		{
			yyVAL.n = nil
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:158
		{
			yyVAL.n = newContractParam(yyDollar[1].s, yyDollar[3].n, yylex)
		}
	case 10:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:159
		{
			yyVAL.n = addContractParam(yyDollar[1].n, yyDollar[3].s, yyDollar[5].n)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:163
		{
			yyVAL.n = newVarValue(yyDollar[1].s, yylex)
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:166
		{
			yyVAL.n = newIndex(yyDollar[1].s, yyDollar[2].n, yylex)
		}
	case 13:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:167
		{
			yyVAL.n = addIndex(yyDollar[1].n, yyDollar[3].n, yylex)
		}
	case 14:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:170
		{
			yyVAL.n = nil
		}
	case 15:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:171
		{
			yyVAL.n = yyDollar[3].n
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:175
		{
			yyVAL.n = nil
		}
	case 17:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:176
		{
			yyVAL.n = newElif(yyDollar[1].n, yyDollar[3].n, yyDollar[5].n, yylex)
		}
	case 18:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:180
		{
			yyVAL.n = nil
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:181
		{
			yyVAL.n = newCase(yyDollar[1].n, yyDollar[3].n, yyDollar[5].n, yylex)
		}
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:185
		{
			yyVAL.n = nil
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:186
		{
			yyVAL.n = yyDollar[3].n
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:190
		{
			yyVAL.n = newSwitch(yyDollar[2].n, yyDollar[4].n, yyDollar[5].n, yylex)
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:194
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, ASSIGN, yylex)
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:195
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, ADD_ASSIGN, yylex)
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:196
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, SUB_ASSIGN, yylex)
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:197
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, MUL_ASSIGN, yylex)
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:198
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, DIV_ASSIGN, yylex)
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:199
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, MOD_ASSIGN, yylex)
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:200
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, LEFT_SHIFT_ASSIGN, yylex)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:201
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, RIGHT_SHIFT_ASSIGN, yylex)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:202
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, BIT_AND_ASSIGN, yylex)
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:203
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, BIT_XOR_ASSIGN, yylex)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:204
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, BIT_OR_ASSIGN, yylex)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:205
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, ASSIGN, yylex)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:206
		{
			yyVAL.n = newBinary(newVarDecl([]string{yyDollar[2].s}, yylex), yyDollar[4].n, ASSIGN, yylex)
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:207
		{
			yyVAL.n = newVarDecl(yyDollar[2].sa, yylex)
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:208
		{
			yyVAL.n = newIf(yyDollar[2].n, yyDollar[4].n, yyDollar[6].n, yyDollar[7].n, yylex)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:209
		{
			yyVAL.n = newBreak(yylex)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:210
		{
			yyVAL.n = newContinue(yylex)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:211
		{
			yyVAL.n = newReturn(nil, yylex)
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:212
		{
			yyVAL.n = newReturn(yyDollar[2].n, yylex)
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:213
		{
			yyVAL.n = newWhile(yyDollar[2].n, yyDollar[4].n, yylex)
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:214
		{
			yyVAL.n = newFunc(yyDollar[2].s, yyDollar[3].va, yyDollar[6].n, yylex)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:217
		{
			yyVAL.n = newCallFunc(yyDollar[1].s, yyDollar[2].n, yylex)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:218
		{
			yyVAL.n = newCallContract(yyDollar[1].s, yyDollar[2].n, yylex)
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:219
		{
			yyVAL.n = newFor(yyDollar[2].s, yyDollar[4].n, yyDollar[6].n, yylex)
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:220
		{
			yyVAL.n = newForAll(yyDollar[2].s, yyDollar[4].s, yyDollar[6].n, yyDollar[8].n, yylex)
		}
	case 48:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:221
		{
			yyVAL.n = newForInt(yyDollar[2].s, yyDollar[4].n, yyDollar[6].n, yyDollar[8].n, yylex)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:225
		{
			yyVAL.n = newArray(yyDollar[1].n, yylex)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:226
		{
			yyVAL.n = appendArray(yyDollar[1].n, yyDollar[3].n, yylex)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:230
		{
			yyVAL.n = newMap(yyDollar[1].s, yyDollar[3].n, yylex)
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:231
		{
			yyVAL.n = appendMap(yyDollar[1].n, yyDollar[3].s, yyDollar[6].n, yylex)
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:232
		{
			yyVAL.n = appendMap(yyDollar[1].n, yyDollar[3].s, yyDollar[5].n, yylex)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:236
		{
			yyVAL.n = yyDollar[2].n
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:237
		{
			yyVAL.n = newValue(yyDollar[1].i, yylex)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:238
		{
			yyVAL.n = newValue(yyDollar[1].f, yylex)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:239
		{
			yyVAL.n = newValue(yyDollar[1].s, yylex)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:240
		{
			yyVAL.n = newValue(yyDollar[1].s, yylex)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:241
		{
			yyVAL.n = newValue(true, yylex)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:242
		{
			yyVAL.n = newValue(false, yylex)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:243
		{
			yyVAL.n = newCallFunc(yyDollar[1].s, yyDollar[2].n, yylex)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:244
		{
			yyVAL.n = newCallContract(yyDollar[1].s, yyDollar[2].n, yylex)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:245
		{
			yyVAL.n = yyDollar[1].n
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:246
		{
			yyVAL.n = newEnv(yyDollar[1].s, yylex)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:247
		{
			yyVAL.n = newGetVar(yyDollar[1].s, yylex)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:248
		{
			yyVAL.n = yyDollar[2].n
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:249
		{
			yyVAL.n = yyDollar[2].n
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:250
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, MUL, yylex)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:251
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, DIV, yylex)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:252
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, ADD, yylex)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:253
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, SUB, yylex)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:254
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, MOD, yylex)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:255
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, AND, yylex)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:256
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, OR, yylex)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:257
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, EQ, yylex)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:258
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, NOT_EQ, yylex)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:259
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, LTE, yylex)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:260
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, GTE, yylex)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:261
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, LT, yylex)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:262
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, GT, yylex)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:263
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, BIT_AND, yylex)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:264
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, BIT_OR, yylex)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:265
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, BIT_XOR, yylex)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:266
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, LEFT_SHIFT, yylex)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:267
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, RIGHT_SHIFT, yylex)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:268
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, POW, yylex)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:270
		{
			yyVAL.n = newUnary(yyDollar[2].n, SUB, yylex)
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:271
		{
			yyVAL.n = newUnary(yyDollar[2].n, NOT, yylex)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:275
		{
			yyVAL.sa = []string{yyDollar[1].s}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:276
		{
			yyVAL.sa = append(yyDollar[1].sa, yyDollar[2].s)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:280
		{
			yyVAL.va = newVars(yyDollar[1].sa)
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:284
		{
			yyVAL.va = nil
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:285
		{
			yyVAL.va = yyDollar[1].va
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:286
		{
			yyVAL.va = append(yyDollar[1].va, yyDollar[3].va...)
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:290
		{
			yyVAL.va = newVars(yyDollar[2].sa)
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:291
		{
			yyVAL.va = newVarExp(yyDollar[2].s, yyDollar[4].n, yylex)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:295
		{
			yyVAL.va = yyDollar[1].va
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:296
		{
			yyVAL.va = append(yyDollar[1].va, yyDollar[3].va...)
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:300
		{
			yyVAL.va = nil
		}
	case 100:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:301
		{
			yyVAL.va = yyDollar[4].va
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:305
		{
			yyVAL.n = newBlock(yyDollar[1].va, yyDollar[2].n, yylex)
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:311
		{
			yyVAL.b = false
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:312
		{
			yyVAL.b = true
		}
	case 104:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:316
		{
			yyVAL.n = newContract(yyDollar[2].s, yyDollar[3].b, yyDollar[6].n, yylex)
			setResult(yylex, yyVAL.n)
		}
	}
	goto yystack /* stack new state and value */
}
